LOGGER: logging.Logger = ...
class BenchmarkConfig:
    def __init__(self, config_path) -> None: ...

class DockerImageHandler:
    def __init__(self, docker_tag, cuda_version=None, branch: str = "master") -> None: ...
    def build_image(self, use_local_serve_folder: bool = False) -> None: ...
    def process_docker_config(ec2_connection, docker_dev_image_config_path, ec2_instance_type, is_local_execution) -> typing.Tuple[typing.Optional[str], str]: ...
    def pull_docker_image(dockerhub_image, docker_tag, connection=None) -> None: ...
    def pull_docker_image_from_ecr(account_id, region, docker_repo_tag: str = f"{$local_benchmarks?automated?tests?utils$DEFAULT_DOCKER_DEV_ECR_REPO_TAG}", connection=None) -> None: ...
    def push_docker_image_to_ecr(account_id, region, docker_repo_tag: str = f"{$local_benchmarks?automated?tests?utils$DEFAULT_DOCKER_DEV_ECR_REPO_TAG}", connection=None) -> None: ...

class YamlHandler:
    def validate_benchmark_yaml(yaml_content) -> None: ...
    def validate_docker_yaml(yaml_content) -> None: ...
    def validate_model_yaml(yaml_content) -> bool: ...
    def write_yaml(file_path, dictionary_object) -> None: ...

