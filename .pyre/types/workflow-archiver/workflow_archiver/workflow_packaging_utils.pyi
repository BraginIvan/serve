class WorkflowExportUtils:
    def archive(export_file, workflow_name, workflow_path, manifest: typing.Union[bytes, str]) -> None: ...
    def archive_dir(path, dst) -> None: ...
    def check_war_already_exists(workflow_name, export_file_path, overwrite) -> str: ...
    def check_workflow_name_regex_or_exit(workflow_name) -> None: ...
    def clean_temp_files(temp_files) -> None: ...
    def directory_filter(directory, unwanted_dirs) -> bool: ...
    def file_filter(current_file, files_to_exclude) -> bool: ...
    def generate_workflow(workflow_args) -> workflow-archiver.workflow_archiver.manifest_components.workflow.Workflow: ...
    def make_dir(d: typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, str]) -> None: ...
    def validate_inputs(workflow_name, export_path) -> None: ...

